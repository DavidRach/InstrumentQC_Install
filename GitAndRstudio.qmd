# Forking the project

Now that you have your GitHub account setup, it is time to use it. Our version of the dashboard is contained within the [InstrumentQC](https://github.com/UMGCCFCSS/InstrumentQC) repository. This is publicly available, and given the software repository is licensed under a free copyleft license, you are able to fork (ie. copy) the existing project and modify it.

To do so, you will first navigate to the [InstrumentQC](https://github.com/UMGCCFCSS/InstrumentQC) repository. From here you will select [the fork the repository option]{.underline}

![](images/01_Fork.png){fig-align="center" width="600"}

GitHub will then give you the option to rename the project or to keep the existing name. If you modify the name, there may be a couple additional lines of code you will need to modify later on, but that would be minor enough so don't let that stop you if you hate the existing name.

![](images/02_Fork.png){fig-align="center" width="600"}

You now have your own copy of the repository that you can modify to generate a dashboard that is customized to your instruments. Please make a note of your forked repositories url as you will need it when setting up the project locally with Rstudio in a little bit.

![](images/03_Fork.png){fig-align="center"}

# Rstudio and GitHub

Open up Rstudio for the first time, and set to use the default R installation.

The first order of business is making sure we have Rstudio set up to communicate with GitHub through git. We will first install the devtools package. Once this is done, navigate to terminal and set the following for user email and username to match that of your GitHub account.

Navigate back to your GitHub account, click on your profile icon on the far upper right, and then [select settings]{.underline}

![](images/01_GitToken.png){fig-align="center" width="600"}

From here, you will navigate to the lower left side and click on developer settings

![](images/02_GitToken.png){fig-align="center" width="260"}

Once you are on the next page, you will select [Tokens (classic) option]{.underline}

![](images/03_GitToken.png){fig-align="center" width="600"}

From there, you will now proceed to click on [Generate new token and select the classic option]{.underline}

![](images/04_GitToken.png){fig-align="center"}

On the next screen, things get busy. Go ahead and place a note for the token with the instrument name so you know which match with each other. Set the expiration for no expiration or a long-period, and only click on the repo option to grant those accesses. Proceed down to the bottom of the screen and click on the green generate token button.

![](images/05_GitToken.png){fig-align="center" width="600"}

The website will refresh and provide you a GitHub token and the option to copy it. Copy it and temporarily store it in a .txt file (notepad) as you will need it when setting up the connection between Github and Rstudio. You will not be able to see the code again from this screen, so stash wisely, and be cautious not to store this anywhere that others may find it.

![](images/06_GitToken.png){fig-align="center"}

You will now navigate to Rstudio, where you will enter the code.... steps.... You will also go ahead and save as an Renviron variable with additional details explaining why to be provided later.

With Rstudio and GitHub now communicating with each other, it is time to bring a copy of your forked InstrumentQC repository into Rstudio (and the local computer environment more broadly).

To do this, after opening Rstudio, navigate to the upper left corner to the File tab and select [create a New Project]{.underline}

![](images/01_NewProject.png){fig-align="center" width="600"}

From here, you will select the [Version Control]{.underline} option

![](images/02_NewProject.png){fig-align="center" width="600"}

You will next select to [use the Git option]{.underline}

![](images/03_NewProject.png){fig-align="center" width="600"}

And now you will p[rovide the url to the forked repository,]{.underline} ie. the version on your own GitHub. The Project directory will autopopulate.

Before hitting Create Project, make note of where the project is set to be saved at by hitting browse.

In general, for many windows computers, it will be under the document folder, which should be fine. Alternatively, if your workplace forces everyone to save things on OneDrive, the default folder may be somewhere in the cloud. Ideally, try to store it on the local computer to avoid complicating the file.path setup in the next section, so if in a OneDrive scenario, create a new folder under the local C: drive and save it within that folder.

Once you know where you are saving the project to, hit Create Project.

![](images/04_NewProject.png){fig-align="center" width="600"}

With all that done, you now have the project and all it's associated code available locally.

Once this is done, open the file and verify that you can open edit the contents.

The next steps are to install required R packages needed to execute the code. Most of these are available through either Bioconductor or CRAN repositories. The one exception is our R package Luciernaga that host some of the dashboard functions, that is currently only available via GitHub. To install, follow the following workflow.

Finally, verify connection is working by saving your changes by commiting, write a commit message, and push to your repository. Navigate to the website and confirm the update has moved.
