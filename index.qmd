If you have reached this webpage, it is likely you have discovered our [InstrumentQC]() dashboard we implemented at the University of Maryland, Baltimore and are either curious how it works, or looking to see if you can implement it for your own Cytek instruments at your current workspace. 

Having put some effort into getting this to work in the first place, I would love to see others benefit and implement their own version of the dashboard more broadly. I am therefore providing this quite-detailed explanation of the process that goes into producing our version of the dashboard. Those with some previous R and GitHub experience should likely be able to replicate and customize to their own installations with only some adjustments needed. If you are starting from scratch on the coding side, I have made a good effort at at screen shots to hopefully reduce any barriers that you may encounter. If you do get stuck, first check issues to see if other's have encountered a similar issue, and if not, feel free to open a new one and I will see if I can help troubleshoot.

Best-
David

# Big Picture

After Daily QC, the resulting daily QC files (both .fcs and .csv) are processed using [R](https://www.r-project.org/). This data is version controlled using [Git](https://git-scm.com/), and passed along to a [GitHub](https://github.com/) repository for storage. The dashboard itself is built using [Quarto](https://quarto.org/) and published as a GitHub page.

We install the required software to execute the above process on each instruments computer, tailoring an R script (.R) and Quarto Markdown File (.qmd) for each instrument. We then set a WindowsTaskSchedule to automatically run the data-processing step at a given time, and pass the data to GitHub. This can then be rendered manually into the dashboard, or a Github Actions set up to render the dashboard at a particular time of day.