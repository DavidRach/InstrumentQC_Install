---
toc: true
---

```{r}
#| warning: false
#| message: false
#| include: false
library(BiocStyle)
```


# Introduction
In the previous section, we installed the required software, set up the Git permissions for the individual local computers needed for Rstudio and GitHub to communicate and pass along updated files stored locally to your remote repository, and made sure the required R packages were installed. 

In this section, we will now start to modify existing R code originally configured for the the UMGCC flow core computers and adapt it for your setup. This involves first understanding the individual components that are present within the InstrumentQC repository and their purpose. Afterwards, we will identify and change file.paths within the individual .R scripts and .qmd files to find the newly acquired QC .fcs files (and DailyQC report .csv files for Cytek instruments) in their respective folders on your local computers.

# Repository elements

Before we start finding file.paths and modifying lines of code, let's examine the files immediately visible when we first open the forked InstrumentQC repository folder. To do this navigate in FileExplorer to the location you saved the forked repository (we suggested Documents). When you find it, double click to open the folder, and arrange by name. When viewed alphabetically, we see something resembling the following

![](images/01_Structure.png){fig-align="center" width="600"}

## qmd files

Within the files currently visible, we have individual files that are named after invidual instruments (Aurora3L, Aurora4L, Aurora5L, AuroraCS, LSRII, Aria, Canto). Those that have a .qmd ending contain both text and code segments that together produce a website page. For example, when the Aurora5L.qmd document gets processed into .html, it forms the [following](https://umgccfcss.github.io/InstrumentQC/Aurora5L.html) webpage. By contrast, when the LSRII.qmd document gets processed into .html, it forms its own [webpage](https://umgccfcss.github.io/InstrumentQC/LSRII.html). 

Each Instrument.qmd file, by combining and rearranging individual building code block elements within, allows for extensive modification to account for for the differences for the various instruments (number of lasers, detector configuration and parameters) that can be seen on their respective webpages. We will examine these .qmd files and their individual elements at greater depth in the [Instrument Layout](InstrumentLayout.qmd) section. 

## R files

Continuing scrolling down, we can identify another repeating element set of files (TheScript_3L, TheScript_4L, TheScript_5L, TheScript_CS) that end in .R.

These are .R files, and they contain only R code. In this context, they work as scripts, containing sets of instructions to find the correct storage folder, identify any new data, process it, and save it to individual instruments Archive data folder. Our first modification of file.paths will occur within these Script files. 


## Individual Instrument Folders
We will touch on the other files present within this initial view later on. Before moving to adjust the file paths, go ahead and double click on the data folder. Within this folder, you can see individual folders corresponding to the individual instruments, as well as some of the .pdf and .csv files. Go ahead and double click on the 5L folder. 

At this point, you see nothing but an Archive folder. If however, you were to look in the middle of the processing step, you would see a bunch of .csv and .fcs files also present, since this folder is where the individual computer copies all identified newly acquired files before they are processed. Once they are successfully processed, their data gets copied to the .csv files found within the Archive folder. Once this has been done successfully, the copies of the unprocessed data located in this folder get deleted, leaving only the Archive folder with the processed data present.

## Further considerations

Now that you have an initial idea of the contents of the repository, you can start to prepare a to-do list for changes that you will need to carry out for adapting the existing project to your own instruments. 

If you have only a single cytometer, you will only need a single Instrument.R, Instrument.qmd and Instrument folder to process and store the data, and ultimately generate a single tab webpage. 

If you have 8 instruments, you would need to add those three elements for each one of them, modifying the names accordingly. 

And for each instrument, the file.path arguments will need to direct the computer to find the newly acquired QC data in the correct folder location on those computers, and then pass it to the corresponding Instrument folder so that it can be processed. 

If this sounds confusing, do not worry, we will go through these indivual elements in the process of adjusting the file.paths. 

# File Paths

As mentioned in the introduction, within the .R and .qmd files are lines of code containing file.paths. These serve as addresses used by the software to find folders containing the necessary daily QC files on your individual computer. Since installation of SpectroFlo (and its associated files) will differ on your computer compared to ours, you will need to ensure to update these file paths so that your computer can retrieve the daily QC files from the correct folder when prompted to do so by the executed R scripts. 

## Identifying File Path

For this section, we will focus on data, as it is where new QC files get copied to, processed and stored, and subsequently used in assembly of the dashboard website.

## Local

![](images/01_Local.png){fig-align="center" width="600"}

![](images/02_Local.png){fig-align="center" width="600"}

![](images/03_Local.png){fig-align="center" width="600"}


![](images/05_Local.png){fig-align="center" width="600"}


## Finding Required File Paths

Let's now start by locating your SpectroFlo associated folders you will need to have the file.paths for when modifying the R scripts. On our computer, when the instruments were set up, these were present within the local C: drive folder

![](images/01_FilePaths.png){fig-align="center" width="600"}

You can notice there are two SpectroFlo associated folders present here, Cytekbio and Cytekbioexport. When we retrieve a file.path, we would right click the > symbol. Then we would select the copy address as text option

![](images/02_FilePaths.png){fig-align="center" width="600"}
When we paste, we get something like this: `C:\Cytekbio`. The \ designates a hierarchy of folders descending down to the target folder or file. When working in R, we can reference this by taking the individual folder names and linking them with the file.path function. For this example, it would look something like the following for `C:\Cytekbio` :

```{r}
PathToTheFolderOfInterest <- file.path("C:", "CytekbioExport")
PathToTheFolderOfInterest
```
One of the reasons file.path only needs the folder names is `\` vs `/` will vary depending on what operating system your computer is running on (Windows, Mac or Linux). Additionally, R requires Windows paths that when we right-click copy are shown as `\` be switched to `/`. Using file.path is easier in the long run than needing to remember which is permitted and which one is not. 

Additionally, extra elements can be appended to the file.path by simply including the existing path variable, and then adding the next folder in between "". For example:

```{r}
NextFolderDown <- file.path(PathToTheFolderOfInterest, "Experiments")
NextFolderDown
```
We can see that this is the next folder under, so let's double click and find the file structure. 

![](images/03_FilePaths.png){fig-align="center" width="600"}
We can see in this case that we have folders for Experiments, FCSFiles and Setup. Additionally there are files for individual dates for SetupEngineLog, AppLoginLog and ExperimentUnmixingLog that track activity previously carried out in SpectroFlo. We will navigate to the next folder "Setup"

## Daily QC Files

```{r}
SetupFolderPath <- file.path(NextFolderDown, "Setup")
SetupFolderPath
```
![](images/04_FilePaths.png){fig-align="center" width="600"}

It is within this folder that the DailyQC reports are stored as .csv files. Opening one, we can see their overall structure resembles something like this. The individual elements are beyond the scope of this tutorial, but the data from the majority gets extracted out and utilized for the dashboard.

Unfortunately, the .csv does not follow a "tidy" format (having gaps in spaces and rows rather than equally filled rectangular space). Consequently, a bunch of functions are used to process the data behind the scenes until it is returned in a "tidy" format that R can work with (these can later be downloaded from the Data tab on the dashboard).

It's this path (SetupFolderPath) that we will need to provide to the Rscript so that it can locate new DailyQC .csv files and copy them over to the InstrumentQC folder. Make a note of this path before we continue. 

## Bead FCS Files (System)

If we are relying on the .fcs files acquired during the process of DailyQC, we would navigate from this folder down one additional level.

```{r}
QCFCSFilePath <- file.path(SetupFolderPath, "DailyQC")
QCFCSFilePath
```

It is here where we find the DailyQCDataSample .fcs files. 

![](images/05_FilePaths.png){fig-align="center" width="600"}

![](images/06_FilePaths.png){fig-align="center" width="600"}

We would consequently provide this file.path to the Rscript to provision the files needed to calculate the MFI parameters.

## Bead FCS Files (System)

At our institution, we separately using the the same QC beads used for Daily QC a 3000 bead before and after .fcs sample to compare the changes in MFI after the QC has adjusted. Within SpectroFlo, these are acquired under the Admin account, organized within an experiment corresponding to the month. As a result, these are stored with the other .fcs files acquired by all users that exist within SpectroFlo folder while they wait to be exported as zipped folders. 

Because this can take up quite a bit of memory space in context of a core facility, for our particular SpectroFlo setup, these folders are found under an external hard-drive. 

We would consequently start exploring the folders (and setting up a file.path) like this:

```{r}
External <- file.path("D:")
External
```

![](images/01_BeadsFile.png){fig-align="center" width="600"}

```{r}
FCSFiles <- file.path(External, "Aurora 5 FCS_Files")
FCSFiles
```

![](images/02_BeadsFile.png){fig-align="center" width="600"}

```{r}
Experiments <- file.path(FCSFiles, "Experiments")
Experiments
```

![](images/03_BeadsFile.png){fig-align="center" width="600"}

```{r}
Admin <- file.path(Experiments, "Admin")
Admin
```

![](images/04_BeadsFile.png){fig-align="center" width="600"}
And finally, the important thing is to note the structure that each experiment file name takes. In our case for this instrument, the folders are set to QC_2024-11. When we are having the Rscript find the new QC files for the given day, it calls the function System.time to return the date and time. These are broken into month and day. 

```{r}
Sys.time()
```
Consequently, at the level of this folder, it would look for a folder named "QC_2024-" with the corresponding month provided by Sys.time call. R recognizes character strings exactly in this case, so if you had a name mismatch (ex. "QC 2024-" or "QC_2024_") it would fail to find the correct folder and search the contents within. So this is an area to be aware of and adjust the code accordingly for how you structure the name. 


# Making the Modifications

start with the easiest file.path, we need to find the location you saved the InstrumentQC project to when you downloaded it from Github via Rstudio (recall the browse button to see where it was saved).

Within the InstrumentQC folder, the first level contains the individual R scripts and .qmd files for each instrument, as well as additional files needed for the automation, and dashboard assembly. Below this level, there is a data folder containing folders for the individual instruments. Below this level, are folders containing the archive data folders where processed data is stored after processing and updated with new data daily. 

On first install, modify the names of the folders for your individual instruments, and navigate into the archive folders for the renamed instruments and delete the forked version of the data. These archive data files will be replaced by those of your own instrument after the initial processing. 

Next, you will need to modify the existing Rscript to match the following names, and to point at the Cytekbio Setup folder containing the DailyQC files and to the folder containing the bead .fcs files used as part of the MFI monitoring. Make sure these are correct.

Now, on the upper right hand side, hit the Source option. This should trigger the processing of the entire R script needed to process the past data. If it fails, you will need to troubleshoot whether the file.path your provided is the correct one (most likely error) or an R package dependency is missing (in which case it would need to be installed).

Once complete, you should see the processed data is now present within the Archive folder.

Open up the equivalent .qmd file for your given instrument. This file is what will build the dashboard for the equivalent instrument page on the website. Make sure to similarly modify the file.paths at the top of the file so they match your Archive folder for that project. Once done, hit render button and wait, troubleshooting as needed. Both R script and .qmd will be specific and search for the data within those folders, so we anticipate less issues.

Once done, either a browser window will open showing the data for the instrument, or you will need to go to InstrumentQC, docs folder and open the index.html file to see a local rendered version of the file. Once you are here, congratulations, the basic install for your instrument has been carried out successfully. Repeat for the other instruments for the time being.







